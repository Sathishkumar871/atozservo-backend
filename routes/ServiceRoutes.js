const express = require('express');
const Service = require('../models/Service'); // ‡∞Æ‡±Ä Service ‡∞Æ‡±ã‡∞°‡∞≤‡±ç ‡∞ï‡±Å ‡∞∏‡∞∞‡±à‡∞® ‡∞™‡∞æ‡∞§‡±ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø
const router = express.Router();

// --- Multer ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å Cloudinary ‡∞ï‡∞æ‡∞®‡±ç‡∞´‡∞ø‡∞ó‡∞∞‡±á‡∞∑‡∞®‡±ç ‡∞à ‡∞´‡±à‡∞≤‡±ç ‡∞≤‡±ã‡∞®‡±á ‡∞®‡±á‡∞∞‡±Å‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø ---
// ‡∞á‡∞¶‡∞ø 'MODULE_NOT_FOUND' ‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞™‡∞æ‡∞§‡±ç ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞§ ‡∞≤‡±ã‡∞™‡∞æ‡∞≤‡∞®‡±Å ‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
const multer = require('multer');
const { CloudinaryStorage } = require('multer-storage-cloudinary');
const cloudinary = require('cloudinary').v2;

// Cloudinary ‡∞ï‡∞æ‡∞®‡±ç‡∞´‡∞ø‡∞ó‡∞∞‡±á‡∞∑‡∞®‡±ç: ‡∞Æ‡±Ä .env ‡∞´‡±à‡∞≤‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞µ‡±á‡∞∞‡∞ø‡∞Ø‡∞¨‡±Å‡∞≤‡±ç‡∞∏‡±ç ‡∞∏‡∞∞‡∞ø‡∞ó‡±ç‡∞ó‡∞æ ‡∞≤‡±ã‡∞°‡±ç ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞®‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.
cloudinary.config({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET, // 'processs' ‡∞Ö‡∞®‡±á ‡∞ü‡±à‡∞™‡±ã ‡∞∏‡∞∞‡∞ø‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø
});

// Multer + Cloudinary Storage ‡∞á‡∞Æ‡±á‡∞ú‡±ç ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞π‡±ç‡∞Ø‡∞æ‡∞Ç‡∞°‡∞ø‡∞≤‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∏‡±Ü‡∞ü‡∞™‡±ç
const storage = new CloudinaryStorage({
  cloudinary,
  params: {
    folder: 'services', // Cloudinary ‡∞≤‡±ã ‡∞á‡∞Æ‡±á‡∞ú‡±ç‚Äå‡∞≤‡±Å ‡∞®‡∞ø‡∞≤‡±ç‡∞µ ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡±á ‡∞´‡±ã‡∞≤‡±ç‡∞°‡∞∞‡±ç
    allowed_formats: ['jpg', 'jpeg', 'png'],
  },
});
const upload = multer({ storage });
// --- Multer ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å Cloudinary ‡∞ï‡∞æ‡∞®‡±ç‡∞´‡∞ø‡∞ó‡∞∞‡±á‡∞∑‡∞®‡±ç ‡∞Æ‡±Å‡∞ó‡∞ø‡∞Ç‡∞™‡±Å ---


// üì§ ‡∞á‡∞Æ‡±á‡∞ú‡±ç ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞∞‡±Ç‡∞ü‡±ç: ‡∞´‡±ç‡∞∞‡∞Ç‡∞ü‡±ç‚Äå‡∞é‡∞Ç‡∞°‡±ç ‡∞á‡∞Æ‡±á‡∞ú‡±ç‚Äå‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞∏‡∞ø URL ‡∞®‡±Å ‡∞™‡±ä‡∞Ç‡∞¶‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞¶‡±Ä‡∞®‡±ç‡∞®‡∞ø ‡∞Æ‡±Å‡∞Ç‡∞¶‡±Å‡∞ó‡∞æ ‡∞ï‡∞æ‡∞≤‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
router.post('/upload', upload.single('image'), async (req, res) => {
  try {
    const imageUrl = req.file?.path; // ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞∏‡∞ø‡∞® ‡∞á‡∞Æ‡±á‡∞ú‡±ç ‡∞Ø‡±ä‡∞ï‡±ç‡∞ï Cloudinary URL
    if (!imageUrl) {
      return res.status(400).json({ error: 'Image upload failed ‚Äì no file received or processed.' });
    }
    console.log('‚úÖ Backend: Image uploaded to Cloudinary successfully. URL:', imageUrl); // ‡∞°‡±Ä‡∞¨‡∞ó‡±ç‡∞ó‡∞ø‡∞Ç‡∞ó‡±ç ‡∞≤‡∞æ‡∞ó‡±ç
    res.json({ url: imageUrl }); // URL ‡∞®‡±Å ‡∞´‡±ç‡∞∞‡∞Ç‡∞ü‡±ç‚Äå‡∞é‡∞Ç‡∞°‡±ç‚Äå‡∞ï‡±Å ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø
  } catch (err) {
    console.error('‚ùå Backend: Cloudinary Upload Error:', err);
    res.status(500).json({ error: 'Image upload failed on the server side.' });
  }
});

// üìù ‡∞∏‡∞∞‡±ç‡∞µ‡±Ä‡∞∏‡±ç ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ø‡±á‡∞ü‡±ç ‡∞∞‡±Ç‡∞ü‡±ç: ‡∞´‡±ç‡∞∞‡∞Ç‡∞ü‡±ç‚Äå‡∞é‡∞Ç‡∞°‡±ç ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞∏‡∞∞‡±ç‡∞µ‡±Ä‡∞∏‡±ç ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞§‡±ã (‡∞á‡∞Æ‡±á‡∞ú‡±ç URL‡∞≤‡∞§‡±ã ‡∞∏‡∞π‡∞æ) ‡∞¶‡±Ä‡∞®‡±ç‡∞®‡∞ø ‡∞∞‡±Ü‡∞Ç‡∞°‡∞µ‡∞¶‡∞ø‡∞ó‡∞æ ‡∞ï‡∞æ‡∞≤‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
router.post('/', async (req, res) => {
  try {
    // ‡∞°‡±Ä‡∞∏‡±ç‡∞ü‡±ç‡∞∞‡∞ï‡±ç‡∞ö‡∞∞‡±ç ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞´‡±Ä‡∞≤‡±ç‡∞°‡±ç‚Äå‡∞≤‡±Å ‡∞´‡±ç‡∞∞‡∞Ç‡∞ü‡±ç‚Äå‡∞é‡∞Ç‡∞°‡±ç postData ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞Ü‡∞∂‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞®‡∞µ‡∞ø
    const {
      name,
      category,
      description,
      price,
      experience,
      features,
      images, // ‡∞á‡∞¶‡∞ø ‡∞´‡±ç‡∞∞‡∞Ç‡∞ü‡±ç‚Äå‡∞é‡∞Ç‡∞°‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞µ‡∞ö‡±ç‡∞ö‡±á Cloudinary URL ‡∞≤ ‡∞Ö‡∞∞‡±á
      userId,
      type,
      address,
      location // ‡∞á‡∞¶‡∞ø {lat, lng} ‡∞Ü‡∞¨‡±ç‡∞ú‡±Ü‡∞ï‡±ç‡∞ü‡±ç ‡∞≤‡±á‡∞¶‡∞æ null
    } = req.body;

    // --- ‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞Æ‡±à‡∞® ‡∞°‡±Ä‡∞¨‡∞ó‡±ç‡∞ó‡∞ø‡∞Ç‡∞ó‡±ç ‡∞≤‡∞æ‡∞ó‡±ç‚Äå‡∞≤‡±Å ---
    // ‡∞á‡∞µ‡∞ø ‡∞¨‡±ç‡∞Ø‡∞æ‡∞ï‡±Ü‡∞Ç‡∞°‡±ç ‡∞´‡±ç‡∞∞‡∞Ç‡∞ü‡±ç‚Äå‡∞é‡∞Ç‡∞°‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞è ‡∞°‡±á‡∞ü‡∞æ‡∞®‡±Å ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡±ã ‡∞ö‡±Ç‡∞™‡±Å‡∞§‡∞æ‡∞Ø‡∞ø.
    console.log('Backend: Received POST /api/services req.body:', req.body);
    console.log('Backend: Received images array for saving:', images);
    // --- ‡∞°‡±Ä‡∞¨‡∞ó‡±ç‡∞ó‡∞ø‡∞Ç‡∞ó‡±ç ‡∞≤‡∞æ‡∞ó‡±ç‚Äå‡∞≤ ‡∞Æ‡±Å‡∞ó‡∞ø‡∞Ç‡∞™‡±Å ---

    // ‚ú®‚ú®‚ú® ‡∞µ‡∞æ‡∞≤‡∞ø‡∞°‡±á‡∞∑‡∞®‡±ç ‡∞≤‡∞æ‡∞ú‡∞ø‡∞ï‡±ç (Name and image are required ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞®‡±Å ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø) ‚ú®‚ú®‚ú®
    // ‡∞à ‡∞µ‡∞æ‡∞≤‡∞ø‡∞°‡±á‡∞∑‡∞®‡±ç ‡∞á‡∞§‡∞∞ ‡∞§‡∞™‡±ç‡∞™‡∞®‡∞ø‡∞∏‡∞∞‡∞ø ‡∞´‡±Ä‡∞≤‡±ç‡∞°‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞á‡∞Æ‡±á‡∞ú‡±ç‚Äå‡∞≤‡±Å ‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Ü‡∞™‡±ç‡∞∑‡∞®‡∞≤‡±ç.
    if (!name || !category || !description || !price || !userId || !type) {
        // ‡∞à ‡∞Æ‡±Ü‡∞∏‡±á‡∞ú‡±ç "Name and image are required" ‡∞ï‡∞ø ‡∞¨‡∞¶‡±Å‡∞≤‡±Å‡∞ó‡∞æ ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞ñ‡∞ö‡±ç‡∞ö‡∞ø‡∞§‡∞Æ‡±à‡∞®‡∞¶‡∞ø.
        return res.status(400).json({ error: 'Missing essential service details (name, category, description, price, type, or user ID).' });
    }

    // ‡∞á‡∞Æ‡±á‡∞ú‡±ç‚Äå‡∞≤ ‡∞µ‡∞æ‡∞≤‡∞ø‡∞°‡±á‡∞∑‡∞®‡±ç:
    // 'images' ‡∞´‡±Ä‡∞≤‡±ç‡∞°‡±ç ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞§‡±á, ‡∞Ö‡∞¶‡∞ø ‡∞ñ‡∞ö‡±ç‡∞ö‡∞ø‡∞§‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞∞‡±á ‡∞Ö‡∞Ø‡∞ø ‡∞â‡∞Ç‡∞°‡∞æ‡∞≤‡∞ø ‡∞Ö‡∞®‡∞ø ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞á‡∞¶‡∞ø ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
    // ‡∞á‡∞¶‡∞ø ‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç ‡∞í‡∞ï ‡∞á‡∞Æ‡±á‡∞ú‡±ç ‡∞§‡∞™‡±ç‡∞™‡∞®‡∞ø‡∞∏‡∞∞‡∞ø ‡∞Ö‡∞®‡∞ø ‡∞ï‡±ã‡∞∞‡∞¶‡±Å (‡∞á‡∞Æ‡±á‡∞ú‡±ç‚Äå‡∞≤‡±Å ‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Ü‡∞™‡±ç‡∞∑‡∞®‡∞≤‡±ç).
    if (images && !Array.isArray(images)) {
        return res.status(400).json({ error: 'Images field must be an array of URLs if provided.' });
    }
    // ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç ‡∞í‡∞ï ‡∞á‡∞Æ‡±á‡∞ú‡±ç ‡∞§‡∞™‡±ç‡∞™‡∞®‡∞ø‡∞∏‡∞∞‡∞ø ‡∞Ö‡∞®‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞Ç‡∞ö‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±á, ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶‡∞ø ‡∞≤‡±à‡∞®‡±ç‚Äå‡∞®‡±Å ‡∞Ö‡∞®‡±ç-‡∞ï‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø:
    // if (images.length === 0) { // 'images' ‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞§‡±á ‡∞≤‡±á‡∞¶‡∞æ ‡∞ñ‡∞æ‡∞≥‡±Ä‡∞ó‡∞æ ‡∞â‡∞Ç‡∞ü‡±á
    //   return res.status(400).json({ error: 'At least one image is required for the service.' });
    // }


    // ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞°‡±Ä‡∞∏‡±ç‡∞ü‡±ç‡∞∞‡∞ï‡±ç‡∞ö‡∞∞‡±ç ‡∞ö‡±á‡∞∏‡∞ø‡∞® ‡∞°‡±á‡∞ü‡∞æ‡∞§‡±ã ‡∞ï‡±ä‡∞§‡±ç‡∞§ Service ‡∞á‡∞®‡±ç‡∞∏‡±ç‚Äå‡∞ü‡∞æ‡∞®‡±ç‡∞∏‡±ç‚Äå‡∞®‡±Å ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.
    const newService = new Service({
      name,
      category,
      description,
      // price ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å experience ‡∞®‡±Å ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç‚Äå‡∞≤‡±Å‡∞ó‡∞æ ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞Ç‡∞°‡∞ø (req.body ‡∞≤‡±ã‡∞®‡∞ø ‡∞∏‡±ç‡∞ü‡±ç‡∞∞‡∞ø‡∞Ç‡∞ó‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø) ‡∞∏‡±ç‡∞ï‡±Ä‡∞Æ‡∞æ‡∞ï‡±Å ‡∞∏‡∞∞‡∞ø‡∞™‡±ã‡∞Ø‡±á‡∞≤‡∞æ.
      price: parseFloat(price),
      experience: parseInt(experience, 10),
      features,
      images: images || [], // Cloudinary URL ‡∞≤ ‡∞Ö‡∞∞‡±á‡∞®‡±Å ‡∞™‡∞æ‡∞∏‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. 'images' null/undefined ‡∞Ö‡∞Ø‡∞ø‡∞§‡±á, ‡∞ñ‡∞æ‡∞≥‡±Ä ‡∞Ö‡∞∞‡±á‡∞®‡∞ø ‡∞™‡∞æ‡∞∏‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
      userId,
      type,
      address,
      location: location || null,
    });

    const saved = await newService.save(); // ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞∏‡∞∞‡±ç‡∞µ‡±Ä‡∞∏‡±ç ‡∞°‡∞æ‡∞ï‡±ç‡∞Ø‡±Å‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞®‡±Å MongoDB ‡∞≤‡±ã ‡∞∏‡±á‡∞µ‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
    console.log('‚úÖ Backend: Service saved to MongoDB successfully:', saved); // ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Æ‡±à‡∞® ‡∞∏‡±á‡∞µ‡±ç ‡∞§‡±ã ‡∞ß‡±É‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
    res.status(201).json(saved); // ‡∞∏‡±á‡∞µ‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞® ‡∞∏‡∞∞‡±ç‡∞µ‡±Ä‡∞∏‡±ç ‡∞°‡∞æ‡∞ï‡±ç‡∞Ø‡±Å‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞∞‡±Ü‡∞∏‡±ç‡∞™‡∞æ‡∞®‡±ç‡∞∏‡±ç‚Äå‡∞ó‡∞æ ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø

  } catch (err) {
    console.error('‚ùå Backend: Service Creation Error:', err); // ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞é‡∞∞‡±ç‡∞∞‡∞∞‡±ç ‡∞Ü‡∞¨‡±ç‡∞ú‡±Ü‡∞ï‡±ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞µ‡∞ø‡∞µ‡∞∞‡∞£‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞≤‡∞æ‡∞ó‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø
    // ‡∞´‡±ç‡∞∞‡∞Ç‡∞ü‡±ç‚Äå‡∞é‡∞Ç‡∞°‡±ç‚Äå‡∞ï‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞µ‡∞ø‡∞µ‡∞∞‡∞£‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞é‡∞∞‡±ç‡∞∞‡∞∞‡±ç ‡∞Æ‡±Ü‡∞∏‡±á‡∞ú‡±ç‚Äå‡∞®‡±Å ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞Ç‡∞ó‡∞æ ‡∞°‡±Ü‡∞µ‡∞≤‡∞™‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç ‡∞∏‡∞Æ‡∞Ø‡∞Ç‡∞≤‡±ã.
    const errorMessage = err.message || 'Service creation failed.';
    res.status(500).json({
      error: errorMessage,
      details: process.env.NODE_ENV === 'development' ? err : undefined // ‡∞°‡±Ü‡∞µ‡∞≤‡∞™‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç ‡∞Æ‡±ã‡∞°‡±ç‚Äå‡∞≤‡±ã ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞é‡∞∞‡±ç‡∞∞‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞ö‡±Ç‡∞™‡∞Ç‡∞°‡∞ø
    });
  }
});

// üîç ‡∞∏‡∞∞‡±ç‡∞µ‡±Ä‡∞∏‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞™‡±ä‡∞Ç‡∞¶‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∞‡±Ç‡∞ü‡±ç (‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ö‡±á‡∞∞‡±ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø)
router.get('/', async (req, res) => {
  const query = req.query.search || '';
  try {
    const results = query
      ? await Service.find({
          $or: [
            { name: { $regex: query, $options: 'i' } },
            { category: { $regex: query, $options: 'i' } },
          ],
        }).limit(50)
      : await Service.find();
    res.json(results);
  } catch (err) {
    console.error('‚ùå Backend: Service Fetch Error:', err.message);
    res.status(500).json({ error: 'Search failed' });
  }
});

module.exports = router;